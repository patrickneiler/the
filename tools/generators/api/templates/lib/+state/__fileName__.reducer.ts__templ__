import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';
import { createReducer, on, Action } from '@ngrx/store';

import { Entity, EntityState, I<%= className %>Fields } from '@the/utility/models';

import * as <%= className %>Actions from './<%= fileName %>.actions';
import { <%= className %>Entity } from './<%= fileName %>.models';

export const <%= constantName %>_FEATURE_KEY = '<%= name %>s';

export interface <%= className %> extends Entity<I<%= className %>Fields> {
  fields: <%= className %>Entity;
}

export interface State extends EntityState<<%= className %>> {
  loaded: boolean;
}

export interface <%= className %>PartialState {
  readonly [<%= constantName %>_FEATURE_KEY]: State;
}

export const <%= name %>Adapter: EntityAdapter<<%= className %>> = createEntityAdapter<<%= className %>>({
  selectId: (<%= name %>: <%= className %>) => <%= name %>.fields.id,
});

export const initialState: State = <%= name %>Adapter.getInitialState({
  // set initial required properties
  loaded: false,
  ids: [],
});

const <%= name %>Reducer = createReducer(
  initialState,
  on(<%= className %>Actions.init, (state) => ({
    ...state,
    ...initialState,
    loaded: true,
  })),
  on(<%= className %>Actions.load<%= className %>s, (state) => ({
    ...state,
    loaded: false,
    error: null,
  })),
  on(<%= className %>Actions.load<%= className %>sSuccess, (state, { <%= name %>s }) =>
    <%= name %>Adapter.setAll(<%= name %>s, { ...state, loaded: true })
  ),
  on(<%= className %>Actions.load<%= className %>sFailure, (state, { error }) => ({
    ...state,
    error,
  })),
  on(<%= className %>Actions.add<%= className %>s, (state) => ({
    ...state,
    loaded: false,
    error: null,
  })),
  on(<%= className %>Actions.add<%= className %>sSuccess, (state) => ({
    ...state,
    loaded: true,
    error: null,
  })),
  on(<%= className %>Actions.add<%= className %>sFailure, (state, { error }) => ({
    ...state,
    error,
  })),
  on(<%= className %>Actions.selectEvent, (state) => ({
    ...state,
    loaded: false,
    error: null,
  })),
  on(<%= className %>Actions.selectEventSuccess, (state, { id }) => ({
    ...state,
    ids: [id],
    loaded: true,
  })),
  on(<%= className %>Actions.selectEventFailure, (state, { error }) => ({
    ...state,
    error,
  }))
);

export function reducer(state: State, action: Action) {
  return <%= name %>Reducer(state, action);
}
